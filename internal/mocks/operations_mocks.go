// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/operations.go
//
// Generated by this command:
//
//	mockgen -source=internal/interfaces/operations.go -destination=internal/mocks/operations_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/richhaase/plonk/internal/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockBatchProcessor is a mock of BatchProcessor interface.
type MockBatchProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockBatchProcessorMockRecorder
	isgomock struct{}
}

// MockBatchProcessorMockRecorder is the mock recorder for MockBatchProcessor.
type MockBatchProcessorMockRecorder struct {
	mock *MockBatchProcessor
}

// NewMockBatchProcessor creates a new mock instance.
func NewMockBatchProcessor(ctrl *gomock.Controller) *MockBatchProcessor {
	mock := &MockBatchProcessor{ctrl: ctrl}
	mock.recorder = &MockBatchProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchProcessor) EXPECT() *MockBatchProcessorMockRecorder {
	return m.recorder
}

// ProcessItems mocks base method.
func (m *MockBatchProcessor) ProcessItems(ctx context.Context, items []string) ([]interfaces.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessItems", ctx, items)
	ret0, _ := ret[0].([]interfaces.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessItems indicates an expected call of ProcessItems.
func (mr *MockBatchProcessorMockRecorder) ProcessItems(ctx, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessItems", reflect.TypeOf((*MockBatchProcessor)(nil).ProcessItems), ctx, items)
}

// MockProgressReporter is a mock of ProgressReporter interface.
type MockProgressReporter struct {
	ctrl     *gomock.Controller
	recorder *MockProgressReporterMockRecorder
	isgomock struct{}
}

// MockProgressReporterMockRecorder is the mock recorder for MockProgressReporter.
type MockProgressReporterMockRecorder struct {
	mock *MockProgressReporter
}

// NewMockProgressReporter creates a new mock instance.
func NewMockProgressReporter(ctrl *gomock.Controller) *MockProgressReporter {
	mock := &MockProgressReporter{ctrl: ctrl}
	mock.recorder = &MockProgressReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressReporter) EXPECT() *MockProgressReporterMockRecorder {
	return m.recorder
}

// ShowBatchSummary mocks base method.
func (m *MockProgressReporter) ShowBatchSummary(results []interfaces.OperationResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShowBatchSummary", results)
}

// ShowBatchSummary indicates an expected call of ShowBatchSummary.
func (mr *MockProgressReporterMockRecorder) ShowBatchSummary(results any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowBatchSummary", reflect.TypeOf((*MockProgressReporter)(nil).ShowBatchSummary), results)
}

// ShowItemProgress mocks base method.
func (m *MockProgressReporter) ShowItemProgress(result interfaces.OperationResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShowItemProgress", result)
}

// ShowItemProgress indicates an expected call of ShowItemProgress.
func (mr *MockProgressReporterMockRecorder) ShowItemProgress(result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowItemProgress", reflect.TypeOf((*MockProgressReporter)(nil).ShowItemProgress), result)
}

// MockOutputRenderer is a mock of OutputRenderer interface.
type MockOutputRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockOutputRendererMockRecorder
	isgomock struct{}
}

// MockOutputRendererMockRecorder is the mock recorder for MockOutputRenderer.
type MockOutputRendererMockRecorder struct {
	mock *MockOutputRenderer
}

// NewMockOutputRenderer creates a new mock instance.
func NewMockOutputRenderer(ctrl *gomock.Controller) *MockOutputRenderer {
	mock := &MockOutputRenderer{ctrl: ctrl}
	mock.recorder = &MockOutputRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutputRenderer) EXPECT() *MockOutputRendererMockRecorder {
	return m.recorder
}

// StructuredData mocks base method.
func (m *MockOutputRenderer) StructuredData() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StructuredData")
	ret0, _ := ret[0].(any)
	return ret0
}

// StructuredData indicates an expected call of StructuredData.
func (mr *MockOutputRendererMockRecorder) StructuredData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StructuredData", reflect.TypeOf((*MockOutputRenderer)(nil).StructuredData))
}

// TableOutput mocks base method.
func (m *MockOutputRenderer) TableOutput() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableOutput")
	ret0, _ := ret[0].(string)
	return ret0
}

// TableOutput indicates an expected call of TableOutput.
func (mr *MockOutputRendererMockRecorder) TableOutput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableOutput", reflect.TypeOf((*MockOutputRenderer)(nil).TableOutput))
}
