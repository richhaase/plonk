// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/config.go
//
// Generated by this command:
//
//	mockgen -source=internal/interfaces/config.go -destination=internal/mocks/config_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	interfaces "github.com/richhaase/plonk/internal/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigReader is a mock of ConfigReader interface.
type MockConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockConfigReaderMockRecorder
	isgomock struct{}
}

// MockConfigReaderMockRecorder is the mock recorder for MockConfigReader.
type MockConfigReaderMockRecorder struct {
	mock *MockConfigReader
}

// NewMockConfigReader creates a new mock instance.
func NewMockConfigReader(ctrl *gomock.Controller) *MockConfigReader {
	mock := &MockConfigReader{ctrl: ctrl}
	mock.recorder = &MockConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigReader) EXPECT() *MockConfigReaderMockRecorder {
	return m.recorder
}

// LoadConfig mocks base method.
func (m *MockConfigReader) LoadConfig(configDir string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", configDir)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfig indicates an expected call of LoadConfig.
func (mr *MockConfigReaderMockRecorder) LoadConfig(configDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockConfigReader)(nil).LoadConfig), configDir)
}

// LoadConfigFromFile mocks base method.
func (m *MockConfigReader) LoadConfigFromFile(filePath string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfigFromFile", filePath)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfigFromFile indicates an expected call of LoadConfigFromFile.
func (mr *MockConfigReaderMockRecorder) LoadConfigFromFile(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfigFromFile", reflect.TypeOf((*MockConfigReader)(nil).LoadConfigFromFile), filePath)
}

// LoadConfigFromReader mocks base method.
func (m *MockConfigReader) LoadConfigFromReader(reader io.Reader) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfigFromReader", reader)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfigFromReader indicates an expected call of LoadConfigFromReader.
func (mr *MockConfigReaderMockRecorder) LoadConfigFromReader(reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfigFromReader", reflect.TypeOf((*MockConfigReader)(nil).LoadConfigFromReader), reader)
}

// MockConfigWriter is a mock of ConfigWriter interface.
type MockConfigWriter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigWriterMockRecorder
	isgomock struct{}
}

// MockConfigWriterMockRecorder is the mock recorder for MockConfigWriter.
type MockConfigWriterMockRecorder struct {
	mock *MockConfigWriter
}

// NewMockConfigWriter creates a new mock instance.
func NewMockConfigWriter(ctrl *gomock.Controller) *MockConfigWriter {
	mock := &MockConfigWriter{ctrl: ctrl}
	mock.recorder = &MockConfigWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigWriter) EXPECT() *MockConfigWriterMockRecorder {
	return m.recorder
}

// SaveConfig mocks base method.
func (m *MockConfigWriter) SaveConfig(config any, configDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", config, configDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockConfigWriterMockRecorder) SaveConfig(config, configDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockConfigWriter)(nil).SaveConfig), config, configDir)
}

// SaveConfigToFile mocks base method.
func (m *MockConfigWriter) SaveConfigToFile(config any, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfigToFile", config, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfigToFile indicates an expected call of SaveConfigToFile.
func (mr *MockConfigWriterMockRecorder) SaveConfigToFile(config, filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfigToFile", reflect.TypeOf((*MockConfigWriter)(nil).SaveConfigToFile), config, filePath)
}

// SaveConfigToWriter mocks base method.
func (m *MockConfigWriter) SaveConfigToWriter(config any, writer io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfigToWriter", config, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfigToWriter indicates an expected call of SaveConfigToWriter.
func (mr *MockConfigWriterMockRecorder) SaveConfigToWriter(config, writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfigToWriter", reflect.TypeOf((*MockConfigWriter)(nil).SaveConfigToWriter), config, writer)
}

// MockConfigValidator is a mock of ConfigValidator interface.
type MockConfigValidator struct {
	ctrl     *gomock.Controller
	recorder *MockConfigValidatorMockRecorder
	isgomock struct{}
}

// MockConfigValidatorMockRecorder is the mock recorder for MockConfigValidator.
type MockConfigValidatorMockRecorder struct {
	mock *MockConfigValidator
}

// NewMockConfigValidator creates a new mock instance.
func NewMockConfigValidator(ctrl *gomock.Controller) *MockConfigValidator {
	mock := &MockConfigValidator{ctrl: ctrl}
	mock.recorder = &MockConfigValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigValidator) EXPECT() *MockConfigValidatorMockRecorder {
	return m.recorder
}

// ValidateConfig mocks base method.
func (m *MockConfigValidator) ValidateConfig(config any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockConfigValidatorMockRecorder) ValidateConfig(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockConfigValidator)(nil).ValidateConfig), config)
}

// ValidateConfigFromFile mocks base method.
func (m *MockConfigValidator) ValidateConfigFromFile(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfigFromFile", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfigFromFile indicates an expected call of ValidateConfigFromFile.
func (mr *MockConfigValidatorMockRecorder) ValidateConfigFromFile(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfigFromFile", reflect.TypeOf((*MockConfigValidator)(nil).ValidateConfigFromFile), filePath)
}

// MockDomainConfigLoader is a mock of DomainConfigLoader interface.
type MockDomainConfigLoader struct {
	ctrl     *gomock.Controller
	recorder *MockDomainConfigLoaderMockRecorder
	isgomock struct{}
}

// MockDomainConfigLoaderMockRecorder is the mock recorder for MockDomainConfigLoader.
type MockDomainConfigLoaderMockRecorder struct {
	mock *MockDomainConfigLoader
}

// NewMockDomainConfigLoader creates a new mock instance.
func NewMockDomainConfigLoader(ctrl *gomock.Controller) *MockDomainConfigLoader {
	mock := &MockDomainConfigLoader{ctrl: ctrl}
	mock.recorder = &MockDomainConfigLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainConfigLoader) EXPECT() *MockDomainConfigLoaderMockRecorder {
	return m.recorder
}

// GetDotfileTargets mocks base method.
func (m *MockDomainConfigLoader) GetDotfileTargets() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDotfileTargets")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetDotfileTargets indicates an expected call of GetDotfileTargets.
func (mr *MockDomainConfigLoaderMockRecorder) GetDotfileTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDotfileTargets", reflect.TypeOf((*MockDomainConfigLoader)(nil).GetDotfileTargets))
}

// GetExpandDirectories mocks base method.
func (m *MockDomainConfigLoader) GetExpandDirectories() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpandDirectories")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetExpandDirectories indicates an expected call of GetExpandDirectories.
func (mr *MockDomainConfigLoaderMockRecorder) GetExpandDirectories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpandDirectories", reflect.TypeOf((*MockDomainConfigLoader)(nil).GetExpandDirectories))
}

// GetIgnorePatterns mocks base method.
func (m *MockDomainConfigLoader) GetIgnorePatterns() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIgnorePatterns")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetIgnorePatterns indicates an expected call of GetIgnorePatterns.
func (mr *MockDomainConfigLoaderMockRecorder) GetIgnorePatterns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIgnorePatterns", reflect.TypeOf((*MockDomainConfigLoader)(nil).GetIgnorePatterns))
}

// GetPackagesForManager mocks base method.
func (m *MockDomainConfigLoader) GetPackagesForManager(managerName string) ([]interfaces.PackageConfigItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackagesForManager", managerName)
	ret0, _ := ret[0].([]interfaces.PackageConfigItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackagesForManager indicates an expected call of GetPackagesForManager.
func (mr *MockDomainConfigLoaderMockRecorder) GetPackagesForManager(managerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackagesForManager", reflect.TypeOf((*MockDomainConfigLoader)(nil).GetPackagesForManager), managerName)
}

// MockConfigService is a mock of ConfigService interface.
type MockConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceMockRecorder
	isgomock struct{}
}

// MockConfigServiceMockRecorder is the mock recorder for MockConfigService.
type MockConfigServiceMockRecorder struct {
	mock *MockConfigService
}

// NewMockConfigService creates a new mock instance.
func NewMockConfigService(ctrl *gomock.Controller) *MockConfigService {
	mock := &MockConfigService{ctrl: ctrl}
	mock.recorder = &MockConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigService) EXPECT() *MockConfigServiceMockRecorder {
	return m.recorder
}

// GetDotfileTargets mocks base method.
func (m *MockConfigService) GetDotfileTargets() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDotfileTargets")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetDotfileTargets indicates an expected call of GetDotfileTargets.
func (mr *MockConfigServiceMockRecorder) GetDotfileTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDotfileTargets", reflect.TypeOf((*MockConfigService)(nil).GetDotfileTargets))
}

// GetExpandDirectories mocks base method.
func (m *MockConfigService) GetExpandDirectories() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpandDirectories")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetExpandDirectories indicates an expected call of GetExpandDirectories.
func (mr *MockConfigServiceMockRecorder) GetExpandDirectories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpandDirectories", reflect.TypeOf((*MockConfigService)(nil).GetExpandDirectories))
}

// GetIgnorePatterns mocks base method.
func (m *MockConfigService) GetIgnorePatterns() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIgnorePatterns")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetIgnorePatterns indicates an expected call of GetIgnorePatterns.
func (mr *MockConfigServiceMockRecorder) GetIgnorePatterns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIgnorePatterns", reflect.TypeOf((*MockConfigService)(nil).GetIgnorePatterns))
}

// GetPackagesForManager mocks base method.
func (m *MockConfigService) GetPackagesForManager(managerName string) ([]interfaces.PackageConfigItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackagesForManager", managerName)
	ret0, _ := ret[0].([]interfaces.PackageConfigItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackagesForManager indicates an expected call of GetPackagesForManager.
func (mr *MockConfigServiceMockRecorder) GetPackagesForManager(managerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackagesForManager", reflect.TypeOf((*MockConfigService)(nil).GetPackagesForManager), managerName)
}

// LoadConfig mocks base method.
func (m *MockConfigService) LoadConfig(configDir string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", configDir)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfig indicates an expected call of LoadConfig.
func (mr *MockConfigServiceMockRecorder) LoadConfig(configDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockConfigService)(nil).LoadConfig), configDir)
}

// LoadConfigFromFile mocks base method.
func (m *MockConfigService) LoadConfigFromFile(filePath string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfigFromFile", filePath)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfigFromFile indicates an expected call of LoadConfigFromFile.
func (mr *MockConfigServiceMockRecorder) LoadConfigFromFile(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfigFromFile", reflect.TypeOf((*MockConfigService)(nil).LoadConfigFromFile), filePath)
}

// LoadConfigFromReader mocks base method.
func (m *MockConfigService) LoadConfigFromReader(reader io.Reader) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfigFromReader", reader)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfigFromReader indicates an expected call of LoadConfigFromReader.
func (mr *MockConfigServiceMockRecorder) LoadConfigFromReader(reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfigFromReader", reflect.TypeOf((*MockConfigService)(nil).LoadConfigFromReader), reader)
}

// SaveConfig mocks base method.
func (m *MockConfigService) SaveConfig(config any, configDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", config, configDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockConfigServiceMockRecorder) SaveConfig(config, configDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockConfigService)(nil).SaveConfig), config, configDir)
}

// SaveConfigToFile mocks base method.
func (m *MockConfigService) SaveConfigToFile(config any, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfigToFile", config, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfigToFile indicates an expected call of SaveConfigToFile.
func (mr *MockConfigServiceMockRecorder) SaveConfigToFile(config, filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfigToFile", reflect.TypeOf((*MockConfigService)(nil).SaveConfigToFile), config, filePath)
}

// SaveConfigToWriter mocks base method.
func (m *MockConfigService) SaveConfigToWriter(config any, writer io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfigToWriter", config, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfigToWriter indicates an expected call of SaveConfigToWriter.
func (mr *MockConfigServiceMockRecorder) SaveConfigToWriter(config, writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfigToWriter", reflect.TypeOf((*MockConfigService)(nil).SaveConfigToWriter), config, writer)
}

// ValidateConfig mocks base method.
func (m *MockConfigService) ValidateConfig(config any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockConfigServiceMockRecorder) ValidateConfig(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockConfigService)(nil).ValidateConfig), config)
}

// ValidateConfigFromFile mocks base method.
func (m *MockConfigService) ValidateConfigFromFile(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfigFromFile", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfigFromFile indicates an expected call of ValidateConfigFromFile.
func (mr *MockConfigServiceMockRecorder) ValidateConfigFromFile(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfigFromFile", reflect.TypeOf((*MockConfigService)(nil).ValidateConfigFromFile), filePath)
}

// MockDotfileConfigLoader is a mock of DotfileConfigLoader interface.
type MockDotfileConfigLoader struct {
	ctrl     *gomock.Controller
	recorder *MockDotfileConfigLoaderMockRecorder
	isgomock struct{}
}

// MockDotfileConfigLoaderMockRecorder is the mock recorder for MockDotfileConfigLoader.
type MockDotfileConfigLoaderMockRecorder struct {
	mock *MockDotfileConfigLoader
}

// NewMockDotfileConfigLoader creates a new mock instance.
func NewMockDotfileConfigLoader(ctrl *gomock.Controller) *MockDotfileConfigLoader {
	mock := &MockDotfileConfigLoader{ctrl: ctrl}
	mock.recorder = &MockDotfileConfigLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDotfileConfigLoader) EXPECT() *MockDotfileConfigLoaderMockRecorder {
	return m.recorder
}

// GetDotfileTargets mocks base method.
func (m *MockDotfileConfigLoader) GetDotfileTargets() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDotfileTargets")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetDotfileTargets indicates an expected call of GetDotfileTargets.
func (mr *MockDotfileConfigLoaderMockRecorder) GetDotfileTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDotfileTargets", reflect.TypeOf((*MockDotfileConfigLoader)(nil).GetDotfileTargets))
}

// GetExpandDirectories mocks base method.
func (m *MockDotfileConfigLoader) GetExpandDirectories() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpandDirectories")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetExpandDirectories indicates an expected call of GetExpandDirectories.
func (mr *MockDotfileConfigLoaderMockRecorder) GetExpandDirectories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpandDirectories", reflect.TypeOf((*MockDotfileConfigLoader)(nil).GetExpandDirectories))
}

// GetIgnorePatterns mocks base method.
func (m *MockDotfileConfigLoader) GetIgnorePatterns() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIgnorePatterns")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetIgnorePatterns indicates an expected call of GetIgnorePatterns.
func (mr *MockDotfileConfigLoaderMockRecorder) GetIgnorePatterns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIgnorePatterns", reflect.TypeOf((*MockDotfileConfigLoader)(nil).GetIgnorePatterns))
}
