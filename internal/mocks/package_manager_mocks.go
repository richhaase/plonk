// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/package_manager.go
//
// Generated by this command:
//
//	mockgen -source=internal/interfaces/package_manager.go -destination=internal/mocks/package_manager_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/richhaase/plonk/internal/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockPackageManagerCapabilities is a mock of PackageManagerCapabilities interface.
type MockPackageManagerCapabilities struct {
	ctrl     *gomock.Controller
	recorder *MockPackageManagerCapabilitiesMockRecorder
	isgomock struct{}
}

// MockPackageManagerCapabilitiesMockRecorder is the mock recorder for MockPackageManagerCapabilities.
type MockPackageManagerCapabilitiesMockRecorder struct {
	mock *MockPackageManagerCapabilities
}

// NewMockPackageManagerCapabilities creates a new mock instance.
func NewMockPackageManagerCapabilities(ctrl *gomock.Controller) *MockPackageManagerCapabilities {
	mock := &MockPackageManagerCapabilities{ctrl: ctrl}
	mock.recorder = &MockPackageManagerCapabilitiesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageManagerCapabilities) EXPECT() *MockPackageManagerCapabilitiesMockRecorder {
	return m.recorder
}

// SupportsSearch mocks base method.
func (m *MockPackageManagerCapabilities) SupportsSearch() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsSearch")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsSearch indicates an expected call of SupportsSearch.
func (mr *MockPackageManagerCapabilitiesMockRecorder) SupportsSearch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsSearch", reflect.TypeOf((*MockPackageManagerCapabilities)(nil).SupportsSearch))
}

// MockPackageManager is a mock of PackageManager interface.
type MockPackageManager struct {
	ctrl     *gomock.Controller
	recorder *MockPackageManagerMockRecorder
	isgomock struct{}
}

// MockPackageManagerMockRecorder is the mock recorder for MockPackageManager.
type MockPackageManagerMockRecorder struct {
	mock *MockPackageManager
}

// NewMockPackageManager creates a new mock instance.
func NewMockPackageManager(ctrl *gomock.Controller) *MockPackageManager {
	mock := &MockPackageManager{ctrl: ctrl}
	mock.recorder = &MockPackageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageManager) EXPECT() *MockPackageManagerMockRecorder {
	return m.recorder
}

// GetInstalledVersion mocks base method.
func (m *MockPackageManager) GetInstalledVersion(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalledVersion", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstalledVersion indicates an expected call of GetInstalledVersion.
func (mr *MockPackageManagerMockRecorder) GetInstalledVersion(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalledVersion", reflect.TypeOf((*MockPackageManager)(nil).GetInstalledVersion), ctx, name)
}

// Info mocks base method.
func (m *MockPackageManager) Info(ctx context.Context, name string) (*interfaces.PackageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx, name)
	ret0, _ := ret[0].(*interfaces.PackageInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockPackageManagerMockRecorder) Info(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockPackageManager)(nil).Info), ctx, name)
}

// Install mocks base method.
func (m *MockPackageManager) Install(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install.
func (mr *MockPackageManagerMockRecorder) Install(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockPackageManager)(nil).Install), ctx, name)
}

// IsAvailable mocks base method.
func (m *MockPackageManager) IsAvailable(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockPackageManagerMockRecorder) IsAvailable(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockPackageManager)(nil).IsAvailable), ctx)
}

// IsInstalled mocks base method.
func (m *MockPackageManager) IsInstalled(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInstalled", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInstalled indicates an expected call of IsInstalled.
func (mr *MockPackageManagerMockRecorder) IsInstalled(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInstalled", reflect.TypeOf((*MockPackageManager)(nil).IsInstalled), ctx, name)
}

// ListInstalled mocks base method.
func (m *MockPackageManager) ListInstalled(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstalled", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstalled indicates an expected call of ListInstalled.
func (mr *MockPackageManagerMockRecorder) ListInstalled(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstalled", reflect.TypeOf((*MockPackageManager)(nil).ListInstalled), ctx)
}

// Search mocks base method.
func (m *MockPackageManager) Search(ctx context.Context, query string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockPackageManagerMockRecorder) Search(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockPackageManager)(nil).Search), ctx, query)
}

// SupportsSearch mocks base method.
func (m *MockPackageManager) SupportsSearch() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsSearch")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsSearch indicates an expected call of SupportsSearch.
func (mr *MockPackageManagerMockRecorder) SupportsSearch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsSearch", reflect.TypeOf((*MockPackageManager)(nil).SupportsSearch))
}

// Uninstall mocks base method.
func (m *MockPackageManager) Uninstall(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uninstall", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uninstall indicates an expected call of Uninstall.
func (mr *MockPackageManagerMockRecorder) Uninstall(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uninstall", reflect.TypeOf((*MockPackageManager)(nil).Uninstall), ctx, name)
}

// MockPackageConfigLoader is a mock of PackageConfigLoader interface.
type MockPackageConfigLoader struct {
	ctrl     *gomock.Controller
	recorder *MockPackageConfigLoaderMockRecorder
	isgomock struct{}
}

// MockPackageConfigLoaderMockRecorder is the mock recorder for MockPackageConfigLoader.
type MockPackageConfigLoaderMockRecorder struct {
	mock *MockPackageConfigLoader
}

// NewMockPackageConfigLoader creates a new mock instance.
func NewMockPackageConfigLoader(ctrl *gomock.Controller) *MockPackageConfigLoader {
	mock := &MockPackageConfigLoader{ctrl: ctrl}
	mock.recorder = &MockPackageConfigLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageConfigLoader) EXPECT() *MockPackageConfigLoaderMockRecorder {
	return m.recorder
}

// GetPackagesForManager mocks base method.
func (m *MockPackageConfigLoader) GetPackagesForManager(managerName string) ([]interfaces.PackageConfigItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackagesForManager", managerName)
	ret0, _ := ret[0].([]interfaces.PackageConfigItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackagesForManager indicates an expected call of GetPackagesForManager.
func (mr *MockPackageConfigLoaderMockRecorder) GetPackagesForManager(managerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackagesForManager", reflect.TypeOf((*MockPackageConfigLoader)(nil).GetPackagesForManager), managerName)
}
