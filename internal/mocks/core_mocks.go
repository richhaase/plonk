// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/core.go
//
// Generated by this command:
//
//	mockgen -source=internal/interfaces/core.go -destination=internal/mocks/core_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/richhaase/plonk/internal/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockProvider) CreateItem(name string, state interfaces.ItemState, configured *interfaces.ConfigItem, actual *interfaces.ActualItem) interfaces.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", name, state, configured, actual)
	ret0, _ := ret[0].(interfaces.Item)
	return ret0
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockProviderMockRecorder) CreateItem(name, state, configured, actual any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockProvider)(nil).CreateItem), name, state, configured, actual)
}

// Domain mocks base method.
func (m *MockProvider) Domain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain.
func (mr *MockProviderMockRecorder) Domain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockProvider)(nil).Domain))
}

// GetActualItems mocks base method.
func (m *MockProvider) GetActualItems(ctx context.Context) ([]interfaces.ActualItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActualItems", ctx)
	ret0, _ := ret[0].([]interfaces.ActualItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActualItems indicates an expected call of GetActualItems.
func (mr *MockProviderMockRecorder) GetActualItems(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActualItems", reflect.TypeOf((*MockProvider)(nil).GetActualItems), ctx)
}

// GetConfiguredItems mocks base method.
func (m *MockProvider) GetConfiguredItems() ([]interfaces.ConfigItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredItems")
	ret0, _ := ret[0].([]interfaces.ConfigItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredItems indicates an expected call of GetConfiguredItems.
func (mr *MockProviderMockRecorder) GetConfiguredItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredItems", reflect.TypeOf((*MockProvider)(nil).GetConfiguredItems))
}
