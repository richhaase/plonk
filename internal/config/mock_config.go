// Code generated by MockGen. DO NOT EDIT.
// Source: internal/config/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/config/interfaces.go -destination=internal/config/mock_config.go -package=config
//

// Package config is a generated GoMock package.
package config

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigReader is a mock of ConfigReader interface.
type MockConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockConfigReaderMockRecorder
	isgomock struct{}
}

// MockConfigReaderMockRecorder is the mock recorder for MockConfigReader.
type MockConfigReaderMockRecorder struct {
	mock *MockConfigReader
}

// NewMockConfigReader creates a new mock instance.
func NewMockConfigReader(ctrl *gomock.Controller) *MockConfigReader {
	mock := &MockConfigReader{ctrl: ctrl}
	mock.recorder = &MockConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigReader) EXPECT() *MockConfigReaderMockRecorder {
	return m.recorder
}

// LoadConfig mocks base method.
func (m *MockConfigReader) LoadConfig(configDir string) (*Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", configDir)
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfig indicates an expected call of LoadConfig.
func (mr *MockConfigReaderMockRecorder) LoadConfig(configDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockConfigReader)(nil).LoadConfig), configDir)
}

// LoadConfigFromFile mocks base method.
func (m *MockConfigReader) LoadConfigFromFile(filePath string) (*Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfigFromFile", filePath)
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfigFromFile indicates an expected call of LoadConfigFromFile.
func (mr *MockConfigReaderMockRecorder) LoadConfigFromFile(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfigFromFile", reflect.TypeOf((*MockConfigReader)(nil).LoadConfigFromFile), filePath)
}

// LoadConfigFromReader mocks base method.
func (m *MockConfigReader) LoadConfigFromReader(reader io.Reader) (*Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfigFromReader", reader)
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfigFromReader indicates an expected call of LoadConfigFromReader.
func (mr *MockConfigReaderMockRecorder) LoadConfigFromReader(reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfigFromReader", reflect.TypeOf((*MockConfigReader)(nil).LoadConfigFromReader), reader)
}

// MockConfigWriter is a mock of ConfigWriter interface.
type MockConfigWriter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigWriterMockRecorder
	isgomock struct{}
}

// MockConfigWriterMockRecorder is the mock recorder for MockConfigWriter.
type MockConfigWriterMockRecorder struct {
	mock *MockConfigWriter
}

// NewMockConfigWriter creates a new mock instance.
func NewMockConfigWriter(ctrl *gomock.Controller) *MockConfigWriter {
	mock := &MockConfigWriter{ctrl: ctrl}
	mock.recorder = &MockConfigWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigWriter) EXPECT() *MockConfigWriterMockRecorder {
	return m.recorder
}

// SaveConfig mocks base method.
func (m *MockConfigWriter) SaveConfig(configDir string, config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", configDir, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockConfigWriterMockRecorder) SaveConfig(configDir, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockConfigWriter)(nil).SaveConfig), configDir, config)
}

// SaveConfigToFile mocks base method.
func (m *MockConfigWriter) SaveConfigToFile(filePath string, config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfigToFile", filePath, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfigToFile indicates an expected call of SaveConfigToFile.
func (mr *MockConfigWriterMockRecorder) SaveConfigToFile(filePath, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfigToFile", reflect.TypeOf((*MockConfigWriter)(nil).SaveConfigToFile), filePath, config)
}

// SaveConfigToWriter mocks base method.
func (m *MockConfigWriter) SaveConfigToWriter(writer io.Writer, config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfigToWriter", writer, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfigToWriter indicates an expected call of SaveConfigToWriter.
func (mr *MockConfigWriterMockRecorder) SaveConfigToWriter(writer, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfigToWriter", reflect.TypeOf((*MockConfigWriter)(nil).SaveConfigToWriter), writer, config)
}

// MockConfigReadWriter is a mock of ConfigReadWriter interface.
type MockConfigReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigReadWriterMockRecorder
	isgomock struct{}
}

// MockConfigReadWriterMockRecorder is the mock recorder for MockConfigReadWriter.
type MockConfigReadWriterMockRecorder struct {
	mock *MockConfigReadWriter
}

// NewMockConfigReadWriter creates a new mock instance.
func NewMockConfigReadWriter(ctrl *gomock.Controller) *MockConfigReadWriter {
	mock := &MockConfigReadWriter{ctrl: ctrl}
	mock.recorder = &MockConfigReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigReadWriter) EXPECT() *MockConfigReadWriterMockRecorder {
	return m.recorder
}

// LoadConfig mocks base method.
func (m *MockConfigReadWriter) LoadConfig(configDir string) (*Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", configDir)
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfig indicates an expected call of LoadConfig.
func (mr *MockConfigReadWriterMockRecorder) LoadConfig(configDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockConfigReadWriter)(nil).LoadConfig), configDir)
}

// LoadConfigFromFile mocks base method.
func (m *MockConfigReadWriter) LoadConfigFromFile(filePath string) (*Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfigFromFile", filePath)
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfigFromFile indicates an expected call of LoadConfigFromFile.
func (mr *MockConfigReadWriterMockRecorder) LoadConfigFromFile(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfigFromFile", reflect.TypeOf((*MockConfigReadWriter)(nil).LoadConfigFromFile), filePath)
}

// LoadConfigFromReader mocks base method.
func (m *MockConfigReadWriter) LoadConfigFromReader(reader io.Reader) (*Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfigFromReader", reader)
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfigFromReader indicates an expected call of LoadConfigFromReader.
func (mr *MockConfigReadWriterMockRecorder) LoadConfigFromReader(reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfigFromReader", reflect.TypeOf((*MockConfigReadWriter)(nil).LoadConfigFromReader), reader)
}

// SaveConfig mocks base method.
func (m *MockConfigReadWriter) SaveConfig(configDir string, config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", configDir, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockConfigReadWriterMockRecorder) SaveConfig(configDir, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockConfigReadWriter)(nil).SaveConfig), configDir, config)
}

// SaveConfigToFile mocks base method.
func (m *MockConfigReadWriter) SaveConfigToFile(filePath string, config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfigToFile", filePath, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfigToFile indicates an expected call of SaveConfigToFile.
func (mr *MockConfigReadWriterMockRecorder) SaveConfigToFile(filePath, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfigToFile", reflect.TypeOf((*MockConfigReadWriter)(nil).SaveConfigToFile), filePath, config)
}

// SaveConfigToWriter mocks base method.
func (m *MockConfigReadWriter) SaveConfigToWriter(writer io.Writer, config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfigToWriter", writer, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfigToWriter indicates an expected call of SaveConfigToWriter.
func (mr *MockConfigReadWriterMockRecorder) SaveConfigToWriter(writer, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfigToWriter", reflect.TypeOf((*MockConfigReadWriter)(nil).SaveConfigToWriter), writer, config)
}

// MockDotfileConfigReader is a mock of DotfileConfigReader interface.
type MockDotfileConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockDotfileConfigReaderMockRecorder
	isgomock struct{}
}

// MockDotfileConfigReaderMockRecorder is the mock recorder for MockDotfileConfigReader.
type MockDotfileConfigReaderMockRecorder struct {
	mock *MockDotfileConfigReader
}

// NewMockDotfileConfigReader creates a new mock instance.
func NewMockDotfileConfigReader(ctrl *gomock.Controller) *MockDotfileConfigReader {
	mock := &MockDotfileConfigReader{ctrl: ctrl}
	mock.recorder = &MockDotfileConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDotfileConfigReader) EXPECT() *MockDotfileConfigReaderMockRecorder {
	return m.recorder
}

// GetDotfileTargets mocks base method.
func (m *MockDotfileConfigReader) GetDotfileTargets() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDotfileTargets")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetDotfileTargets indicates an expected call of GetDotfileTargets.
func (mr *MockDotfileConfigReaderMockRecorder) GetDotfileTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDotfileTargets", reflect.TypeOf((*MockDotfileConfigReader)(nil).GetDotfileTargets))
}

// MockPackageConfigReader is a mock of PackageConfigReader interface.
type MockPackageConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockPackageConfigReaderMockRecorder
	isgomock struct{}
}

// MockPackageConfigReaderMockRecorder is the mock recorder for MockPackageConfigReader.
type MockPackageConfigReaderMockRecorder struct {
	mock *MockPackageConfigReader
}

// NewMockPackageConfigReader creates a new mock instance.
func NewMockPackageConfigReader(ctrl *gomock.Controller) *MockPackageConfigReader {
	mock := &MockPackageConfigReader{ctrl: ctrl}
	mock.recorder = &MockPackageConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageConfigReader) EXPECT() *MockPackageConfigReaderMockRecorder {
	return m.recorder
}

// GetPackagesForManager mocks base method.
func (m *MockPackageConfigReader) GetPackagesForManager(managerName string) ([]PackageConfigItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackagesForManager", managerName)
	ret0, _ := ret[0].([]PackageConfigItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackagesForManager indicates an expected call of GetPackagesForManager.
func (mr *MockPackageConfigReaderMockRecorder) GetPackagesForManager(managerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackagesForManager", reflect.TypeOf((*MockPackageConfigReader)(nil).GetPackagesForManager), managerName)
}

// MockConfigValidator is a mock of ConfigValidator interface.
type MockConfigValidator struct {
	ctrl     *gomock.Controller
	recorder *MockConfigValidatorMockRecorder
	isgomock struct{}
}

// MockConfigValidatorMockRecorder is the mock recorder for MockConfigValidator.
type MockConfigValidatorMockRecorder struct {
	mock *MockConfigValidator
}

// NewMockConfigValidator creates a new mock instance.
func NewMockConfigValidator(ctrl *gomock.Controller) *MockConfigValidator {
	mock := &MockConfigValidator{ctrl: ctrl}
	mock.recorder = &MockConfigValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigValidator) EXPECT() *MockConfigValidatorMockRecorder {
	return m.recorder
}

// ValidateConfig mocks base method.
func (m *MockConfigValidator) ValidateConfig(config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockConfigValidatorMockRecorder) ValidateConfig(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockConfigValidator)(nil).ValidateConfig), config)
}

// ValidateConfigFromReader mocks base method.
func (m *MockConfigValidator) ValidateConfigFromReader(reader io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfigFromReader", reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfigFromReader indicates an expected call of ValidateConfigFromReader.
func (mr *MockConfigValidatorMockRecorder) ValidateConfigFromReader(reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfigFromReader", reflect.TypeOf((*MockConfigValidator)(nil).ValidateConfigFromReader), reader)
}

// MockConfigService is a mock of ConfigService interface.
type MockConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceMockRecorder
	isgomock struct{}
}

// MockConfigServiceMockRecorder is the mock recorder for MockConfigService.
type MockConfigServiceMockRecorder struct {
	mock *MockConfigService
}

// NewMockConfigService creates a new mock instance.
func NewMockConfigService(ctrl *gomock.Controller) *MockConfigService {
	mock := &MockConfigService{ctrl: ctrl}
	mock.recorder = &MockConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigService) EXPECT() *MockConfigServiceMockRecorder {
	return m.recorder
}

// GetDotfileTargets mocks base method.
func (m *MockConfigService) GetDotfileTargets() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDotfileTargets")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetDotfileTargets indicates an expected call of GetDotfileTargets.
func (mr *MockConfigServiceMockRecorder) GetDotfileTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDotfileTargets", reflect.TypeOf((*MockConfigService)(nil).GetDotfileTargets))
}

// GetPackagesForManager mocks base method.
func (m *MockConfigService) GetPackagesForManager(managerName string) ([]PackageConfigItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackagesForManager", managerName)
	ret0, _ := ret[0].([]PackageConfigItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackagesForManager indicates an expected call of GetPackagesForManager.
func (mr *MockConfigServiceMockRecorder) GetPackagesForManager(managerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackagesForManager", reflect.TypeOf((*MockConfigService)(nil).GetPackagesForManager), managerName)
}

// LoadConfig mocks base method.
func (m *MockConfigService) LoadConfig(configDir string) (*Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", configDir)
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfig indicates an expected call of LoadConfig.
func (mr *MockConfigServiceMockRecorder) LoadConfig(configDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockConfigService)(nil).LoadConfig), configDir)
}

// LoadConfigFromFile mocks base method.
func (m *MockConfigService) LoadConfigFromFile(filePath string) (*Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfigFromFile", filePath)
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfigFromFile indicates an expected call of LoadConfigFromFile.
func (mr *MockConfigServiceMockRecorder) LoadConfigFromFile(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfigFromFile", reflect.TypeOf((*MockConfigService)(nil).LoadConfigFromFile), filePath)
}

// LoadConfigFromReader mocks base method.
func (m *MockConfigService) LoadConfigFromReader(reader io.Reader) (*Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfigFromReader", reader)
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfigFromReader indicates an expected call of LoadConfigFromReader.
func (mr *MockConfigServiceMockRecorder) LoadConfigFromReader(reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfigFromReader", reflect.TypeOf((*MockConfigService)(nil).LoadConfigFromReader), reader)
}

// SaveConfig mocks base method.
func (m *MockConfigService) SaveConfig(configDir string, config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", configDir, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockConfigServiceMockRecorder) SaveConfig(configDir, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockConfigService)(nil).SaveConfig), configDir, config)
}

// SaveConfigToFile mocks base method.
func (m *MockConfigService) SaveConfigToFile(filePath string, config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfigToFile", filePath, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfigToFile indicates an expected call of SaveConfigToFile.
func (mr *MockConfigServiceMockRecorder) SaveConfigToFile(filePath, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfigToFile", reflect.TypeOf((*MockConfigService)(nil).SaveConfigToFile), filePath, config)
}

// SaveConfigToWriter mocks base method.
func (m *MockConfigService) SaveConfigToWriter(writer io.Writer, config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfigToWriter", writer, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfigToWriter indicates an expected call of SaveConfigToWriter.
func (mr *MockConfigServiceMockRecorder) SaveConfigToWriter(writer, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfigToWriter", reflect.TypeOf((*MockConfigService)(nil).SaveConfigToWriter), writer, config)
}

// ValidateConfig mocks base method.
func (m *MockConfigService) ValidateConfig(config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockConfigServiceMockRecorder) ValidateConfig(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockConfigService)(nil).ValidateConfig), config)
}

// ValidateConfigFromReader mocks base method.
func (m *MockConfigService) ValidateConfigFromReader(reader io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfigFromReader", reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfigFromReader indicates an expected call of ValidateConfigFromReader.
func (mr *MockConfigServiceMockRecorder) ValidateConfigFromReader(reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfigFromReader", reflect.TypeOf((*MockConfigService)(nil).ValidateConfigFromReader), reader)
}
