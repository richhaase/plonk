package config

import (
	"fmt"
	"sort"
	"strings"
)

// GenerateZshrc generates a complete .zshrc file from ZSH configuration
func GenerateZshrc(config *ZSHConfig) string {
	var lines []string

	// Add header comment
	lines = append(lines, "# Generated by plonk - Do not edit manually")
	lines = append(lines, "")

	// Add source before statements
	if len(config.SourceBefore) > 0 {
		lines = append(lines, "# Source Before")
		for _, sourcePath := range config.SourceBefore {
			lines = append(lines, sourcePath)
		}
		lines = append(lines, "")
	}

	// Add environment variables
	if len(config.EnvVars) > 0 {
		lines = append(lines, "# Environment Variables")
		
		// Sort env vars for consistent output
		var envKeys []string
		for key := range config.EnvVars {
			envKeys = append(envKeys, key)
		}
		sort.Strings(envKeys)
		
		for _, key := range envKeys {
			value := config.EnvVars[key]
			lines = append(lines, fmt.Sprintf("export %s='%s'", key, value))
		}
		lines = append(lines, "")
	}

	// Add aliases
	if len(config.Aliases) > 0 {
		lines = append(lines, "# Aliases")
		
		// Sort aliases for consistent output
		var aliasKeys []string
		for key := range config.Aliases {
			aliasKeys = append(aliasKeys, key)
		}
		sort.Strings(aliasKeys)
		
		for _, key := range aliasKeys {
			value := config.Aliases[key]
			lines = append(lines, fmt.Sprintf("alias %s='%s'", key, value))
		}
		lines = append(lines, "")
	}

	// Add shell options
	if len(config.ShellOptions) > 0 {
		lines = append(lines, "# Shell Options")
		for _, option := range config.ShellOptions {
			lines = append(lines, fmt.Sprintf("setopt %s", option))
		}
		lines = append(lines, "")
	}

	// Add functions
	if len(config.Functions) > 0 {
		lines = append(lines, "# Functions")
		
		// Sort function names for consistent output
		var funcKeys []string
		for key := range config.Functions {
			funcKeys = append(funcKeys, key)
		}
		sort.Strings(funcKeys)
		
		for _, name := range funcKeys {
			body := config.Functions[name]
			lines = append(lines, fmt.Sprintf("function %s() {", name))
			lines = append(lines, "  "+strings.ReplaceAll(body, "\n", "\n  "))
			lines = append(lines, "}")
			lines = append(lines, "")
		}
	}

	// Add initialization commands
	if len(config.Inits) > 0 {
		lines = append(lines, "# Tool Initialization")
		for _, init := range config.Inits {
			lines = append(lines, init)
		}
		lines = append(lines, "")
	}

	// Add completions
	if len(config.Completions) > 0 {
		lines = append(lines, "# Completions")
		for _, completion := range config.Completions {
			lines = append(lines, completion)
		}
		lines = append(lines, "")
	}

	// Add source after statements
	if len(config.SourceAfter) > 0 {
		lines = append(lines, "# Source After")
		for _, sourcePath := range config.SourceAfter {
			lines = append(lines, sourcePath)
		}
		lines = append(lines, "")
	}

	return strings.Join(lines, "\n")
}

// GenerateZshenv generates a complete .zshenv file from ZSH configuration
// .zshenv should only contain environment variables, not interactive shell settings
func GenerateZshenv(config *ZSHConfig) string {
	var lines []string

	// Add header comment
	lines = append(lines, "# Generated by plonk - Do not edit manually")
	lines = append(lines, "# Environment variables for ZSH")
	lines = append(lines, "")

	// Add environment variables only
	if len(config.EnvVars) > 0 {
		// Sort env vars for consistent output
		var envKeys []string
		for key := range config.EnvVars {
			envKeys = append(envKeys, key)
		}
		sort.Strings(envKeys)
		
		for _, key := range envKeys {
			value := config.EnvVars[key]
			lines = append(lines, fmt.Sprintf("export %s='%s'", key, value))
		}
		lines = append(lines, "")
	}

	return strings.Join(lines, "\n")
}