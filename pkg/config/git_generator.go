package config

import (
	"fmt"
	"sort"
	"strings"
)

// GenerateGitconfig generates a complete .gitconfig file from Git configuration.
func GenerateGitconfig(config *GitConfig) string {
	var lines []string

	// Add header comment
	lines = append(lines, "# Generated by plonk - Do not edit manually", "")

	// Define section order for consistent output
	sections := []struct {
		name   string
		values map[string]string
	}{
		{"user", config.User},
		{"core", config.Core},
		{"delta", config.Delta},
		{"alias", config.Aliases},
		{"color", config.Color},
		{"fetch", config.Fetch},
		{"pull", config.Pull},
		{"push", config.Push},
		{"status", config.Status},
		{"diff", config.Diff},
		{"log", config.Log},
		{"init", config.Init},
		{"rerere", config.Rerere},
		{"branch", config.Branch},
		{"rebase", config.Rebase},
		{"merge", config.Merge},
	}

	// Add regular sections
	for _, section := range sections {
		if len(section.values) > 0 {
			lines = append(lines, fmt.Sprintf("[%s]", section.name))

			// Sort keys for consistent output
			var keys []string
			for key := range section.values {
				keys = append(keys, key)
			}
			sort.Strings(keys)

			for _, key := range keys {
				value := section.values[key]
				lines = append(lines, fmt.Sprintf("\t%s = \"%s\"", key, value))
			}
			lines = append(lines, "")
		}
	}

	// Add filter sections (special case with subsections)
	if len(config.Filter) > 0 {
		// Sort filter names for consistent output
		var filterNames []string
		for filterName := range config.Filter {
			filterNames = append(filterNames, filterName)
		}
		sort.Strings(filterNames)

		for _, filterName := range filterNames {
			filterConfig := config.Filter[filterName]
			if len(filterConfig) > 0 {
				lines = append(lines, fmt.Sprintf("[filter \"%s\"]", filterName))

				// Sort filter keys for consistent output
				var filterKeys []string
				for key := range filterConfig {
					filterKeys = append(filterKeys, key)
				}
				sort.Strings(filterKeys)

				for _, key := range filterKeys {
					value := filterConfig[key]
					lines = append(lines, fmt.Sprintf("\t%s = \"%s\"", key, value))
				}
				lines = append(lines, "")
			}
		}
	}

	// Remove trailing empty line if present
	if len(lines) > 0 && lines[len(lines)-1] == "" {
		lines = lines[:len(lines)-1]
	}

	return strings.Join(lines, "\n")
}
